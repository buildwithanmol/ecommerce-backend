generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PaymentModes {
  ONLINE
  COD
}

model User {
  id  String @id @default(uuid())
  name String
  email String
  phone String 
  shipping_address String?
  billing_address String? 
  gst_no String?
  password String
  verification_code Int? 
  is_verified Boolean @default(false)
  is_admin Boolean @default(false)
  orders Order[]
  shipment Shipment[]
}

model Product {
  id String @id @default(uuid())
  title String 
  description String 
  short_description String
  price String
  product_sku String
  return_type String
  packaging String
  payment_mode PaymentModes
  additional_information String?
  expected_delivery_date DateTime? 

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  variations Variation[]
  images Image[]

}

model Variation {
  id String @id @default(uuid())
  title String?
  price String?
  short_description String?
  image_url String @db.Text

  images Image[]

  product_id String 
  product Product @relation(references: [id], fields: [product_id], onDelete: Cascade)

}

model Image {
  id String @id @default(uuid())
  image_url String @db.Text

  variation_id String? 
  variation Variation? @relation(references: [id], fields: [variation_id], onDelete: Cascade)

  product_id String?
  product Product? @relation(references: [id], fields: [product_id], onDelete: Cascade)
}

model Order {
  id String @id @default(uuid())

  // Product Id 
  product_id String
  
  // Order Details
  signature_id String
  transaction_id String 
  order_total String
  quantity String

  // Shipment Details
  shipment Shipment[]
  shipment_initiated Boolean @default(false)
  // User Details
  user_id String
  user User @relation(references: [id], fields: [user_id], onDelete: Cascade)
}

model Shipment {
  id String @id @default(uuid())
  
  // Order details
  order_id String
  order Order @relation(references: [id], fields: [order_id], onDelete: Cascade)

  user_id String 
  user User @relation(references: [id], fields: [user_id], onDelete: Cascade)

  is_delivered Boolean @default(false)
  expected_date DateTime? 

  // Tracking Details
  tracking_state TrackingState[]
}

model TrackingState {
  id String @id @default(uuid())
  time_stamp DateTime @default(now())
  title String 
  description String 
  isCompleted Boolean @default(false)
  
  // Shipment Details
  shipment_id String 
  shipment Shipment @relation(references: [id], fields: [shipment_id], onDelete: Cascade)
}